This is a wrapper around Scylla. It exports functions for IAT fixing.

based on https://github.com/NtQuery/Scylla commit 46f9e0eb9e  (v0.9.2)

What has been changed:
- Native API calls (Nt*) replaced by WinAPI calls
- stripped all WTL/ATL dependencies
- stripped GUI (obviously)

Exports:
//searches IAT, writes to iatStart, iatSize
int scylla_searchIAT(DWORD pid, DWORD_PTR &iatStart, DWORD &iatSize, DWORD_PTR searchStart, bool advancedSearch); 
//reads the imports, iatAddr is VA
int scylla_getImports(DWORD_PTR iatAddr, DWORD iatSize, DWORD pid);
//are all imports valid?
bool scylla_importsValid();
//fix the dump
int scylla_fixDump(WCHAR* dumpFile, WCHAR* iatFixFile);

return codes:
const BYTE SCY_ERROR_SUCCESS = 0;
const BYTE SCY_ERROR_PROCOPEN = -1;
const BYTE SCY_ERROR_IATWRITE = -2;
const BYTE SCY_ERROR_IATSEARCH = -3;
const BYTE SCY_ERROR_IATNOTFOUND = -4;

TODO:
- export a CutThunks function

Usage:

typedef int (*SEARCHIAT) (DWORD, DWORD_PTR &, DWORD &, DWORD_PTR, bool);
typedef int (*GETIMPORTS) (DWORD_PTR, DWORD, DWORD);
typedef bool (*IMPORTSVALID) ();
typedef int (*FIXDUMP) (WCHAR*, WCHAR*);

HMODULE lib = LoadLibrary(_T("scylla_iatfix"));
SEARCHIAT searchIAT = (SEARCHIAT) GetProcAddress(lib, "scylla_searchIAT");
GETIMPORTS getImports = (GETIMPORTS) GetProcAddress(lib, "scylla_getImports");
IMPORTSVALID importsValid = (IMPORTSVALID) GetProcAddress(lib, "scylla_importsValid");
FIXDUMP fixDump = (FIXDUMP) GetProcAddress(lib, "scylla_fixDump");

DWORD iatStart = 0xDEADBEEF;
DWORD iatSize = 0xDEADBEEF;

int search = searchIAT(fdProcessInfo->dwProcessId, iatStart, iatSize, eip, false);

if(search==0) int imports = getImports(iatStart, iatSize, pid);
bool valid = importsValid();
if(valid) int fix = fixDump(dumpFileName, IatFixFileName);
